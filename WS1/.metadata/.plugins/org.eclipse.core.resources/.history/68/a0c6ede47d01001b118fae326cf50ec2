package com.jacaranda.controller;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.jacaranda.entity.Customer;

@RestController
@RequestMapping(path = "/Api")
public class CustomerController {
	private List<Customer> custom = new ArrayList<>();

	@PostMapping(path = "/post")
	public ResponseEntity<?> postCustom(@RequestBody Customer c1) {
		custom.add(c1);

		return ResponseEntity.status(HttpStatus.CREATED).body(c1);
	}

	@GetMapping(path = "/get")
	public ResponseEntity<?> getCustom(@RequestParam int id) {
		ResponseEntity<?> res = null;

		if (custom == null || custom.isEmpty()) {
			res = ResponseEntity.status(HttpStatus.NOT_FOUND).body("No existen empleados");
		} else {
			res = ResponseEntity.status(HttpStatus.OK).body(custom.stream().filter(s -> id == s.getId()));
		}
		
		return res;
	}

	@PutMapping(path = "/put")
	public ResponseEntity<?> putCustom(@RequestBody Customer c1) {
		ResponseEntity<?> res = null;
		Iterator<Customer> iteCus = custom.iterator();
		Customer ec = null;
		
		for (Customer c : custom) {
			if (c1.getId() == c.getId()) {
				ec = c;
			}
		}
		
		ec = custom.stream().filter(c -> c.getId()==c1.getId()).findFirst().orElse(new Customer());
		
		res = ResponseEntity.status(HttpStatus.NOT_FOUND).body(ec);
		
		return res;
	}
	
	@DeleteMapping(path = "/delete")
	public ResponseEntity<?> deleteCustom(@RequestParam int id) {
		Iterator<Customer> iteCus = custom.iterator();
		Customer c = null;
		
		while (iteCus.hasNext() && c == null) {
			Customer c1 = iteCus.next();
			
			if (c1.getId() == id) {
				c = c1;
				custom.remove(c1);
			}
		}
		
		return ResponseEntity.status(HttpStatus.OK).body(c);
	}
}
