package com.jacaranda.controller;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collector;
import java.util.stream.Collectors;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.jacaranda.entity.Customer;

@RestController
@RequestMapping(path = "/Api")
public class CustomerController {
	private List<Customer> custom = new ArrayList<>();

	@PostMapping(path = "/post")
	public ResponseEntity<?> postCustom(@RequestBody Customer c1) {
		custom.add(c1);

		return ResponseEntity.status(HttpStatus.CREATED).body(c1);
	}

	@GetMapping(path = "/get")
	public ResponseEntity<?> getCustom(@RequestParam int id) {
		ResponseEntity<?> res = null;
		
		if (custom != null && !custom.isEmpty()) {
			res = ResponseEntity.status(HttpStatus.NOT_FOUND).body("No existen empleados");
		} else {
			res = ResponseEntity.status(HttpStatus.OK).body(custom.stream().filter(s -> id == s.getId()));
		}
		
		return res;
	}
//	public ResponseEntity<?> getCustom(@RequestParam int id) {
//		ResponseEntity<?> res = null;
//
//		if (custom != null && !custom.isEmpty()) {
//			res = ResponseEntity.status(HttpStatus.NOT_FOUND).body("No existen empleados");
//		} else {
//			
//			res = ResponseEntity.status(HttpStatus.OK).body(custom.stream().sorted().collect(Collectors.toList()));
//		}
//		
//		return res;
//	}

	@PutMapping(path = "/put")
	public ResponseEntity<?> putCustom(@RequestParam Customer c1) {
		ResponseEntity<?> res = null;
		Customer c = null;

		if (!custom.contains(c1)) {
			res = ResponseEntity.status(HttpStatus.NOT_FOUND).body("No existen empleados");
		} else {
			
			
		}
		
		return res;
	}
	
	@DeleteMapping(path = "/delete")
	public ResponseEntity<?> deleteCustom(@RequestParam Customer c1) {
		custom.remove(c1);

		return ResponseEntity.status(HttpStatus.OK).body(c1);
	}
}
